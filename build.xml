<!-- Set Ant Project Name -->
<project name="GaiaBase" default="main" basedir=".">
	
	<!-- Set Flex SDK Path -->
	<property name="FLEX_HOME" value="C:/sdk/flex_sdk_3.5"/>
	
	<property name="build" value="build" />
	
	<property name="src" location="src" />
	<property name="lib" location="lib" />
	<property name="bin" location="bin" />
	
	<property file="${build}/flex.properties"/>
	<property file="${build}/gaia.properties"/>
	
	<property name="templates" location="${build}/templates" />
	<property name="gaia" location="${build}/gaia" />
	<property name="robotlegs" location="${build}/robotlegs" />
	<property name="signals" location="${build}/signals" />
	
	<import file="${build}/lib/textutils.xml"/>
	<import file="${build}/lib/create-files-actionscript.xml"/>
	
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${build}/lib/ant-contrib-1.0b3.jar"/>
	<taskdef resource="flexTasks.tasks" classpath="${flex3dir}/ant/lib/flexTasks.jar" />	
	<taskdef name="xmltask" classpath="${build}/lib/xmltask-v1.15.1.jar" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>
	
	
	<target name="main" depends="scaffolding, seo-scaffolding, compile-all">
		<echo message="main"/>
	</target>
	
	<target name="clean">
		<delete dir="${gaia.pages}"/>
		<delete dir="${src}/models"/>
		<delete dir="${src}/views"/>
		<delete dir="${src}/controllers"/>
		<delete file="${src}/Main.as"/>
		<delete file="${src}/MainContext.as"/>
	</target>
	
	<target name="create-project" depends="clean, scaffolding, seo-scaffolding, compile-all"/>
	
	<target name="scaffolding" depends="create-base, create-main, create-pages, create-static-page"/>
	<target name="seo-scaffolding" depends="seo-html" />
	<target name="compile-all" depends="compile-pages, compile-preloader, compile-main"/>
	
	<!-- Scaffolding -->
	<target name="create-base">
		<mkdir dir="${gaia.pages}"/>
		<mkdir dir="${src}/models"/>
		<mkdir dir="${src}/views"/>
		<mkdir dir="${src}/controllers"/>
		<mkdir dir="${lib}"/>
		<mkdir dir="${bin}"/>
		<mkdir dir="${bin}/js"/>
		<mkdir dir="${bin}/xml"/>
		
	  	<copy todir="${lib}" overwrite="false">
	    	<fileset dir="${gaia}/${gaia.version}"/>
	  	</copy>
		
		<copy todir="${lib}" overwrite="false">
	    	<fileset dir="${robotlegs}"/>
	  	</copy>
		
		<copy todir="${lib}" overwrite="false">
	    	<fileset dir="${signals}"/>
	  	</copy>

		<copy file="${templates}/Preloader.as" tofile="${src}/${pages.package}/Preloader.as" overwrite="false">
			<filterchain>
	           <replacetokens>
	           		<token key="width"    value="${width}"/>
	           		<token key="height"    value="${height}"/>
	           		<token key="framerate"    value="${framerate}"/>
	           		<token key="bgcolor"    value="${bgcolor}"/>
	           </replacetokens>
	        </filterchain>
		</copy>
		
		<copy file="${templates}/Scaffold.as" tofile="${src}/${pages.package}/Scaffold.as" overwrite="false"/>
		
	  	<copy todir="${bin}/js" overwrite="false">
	    	<fileset dir="${templates}/www/js"/>
	  	</copy>	
		
		<copy file="${templates}/www/expressInstall.swf" tofile="${bin}/expressInstall.swf" overwrite="false"/>
		<copy file="${templates}/www/scaffold.swf" tofile="${bin}/scaffold.swf" overwrite="false"/>
		<copy file="${templates}/www/xml/site.xml" tofile="${bin}/xml/site.xml" overwrite="false"/>
	</target>
	
	<target name="create-main">
		<copy file="${templates}/Main.as" tofile="${src}/Main.as"
			overwrite="false">
	        <filterchain>
	           <replacetokens>
	           		<token key="width"    value="${width}"/>
	           		<token key="height"    value="${height}"/>
	           		<token key="framerate"    value="${framerate}"/>
	           		<token key="bgcolor"    value="${bgcolor}"/>
	           </replacetokens>
	        </filterchain>
		</copy>
		<copy file="${templates}/MainContext.as" tofile="${src}/MainContext.as" overwrite="false"/>
	</target>
	
	<target name="create-pages">
		<echo message="create-pages"/>
		<xmltask source="${sitexml}">
			<call path="//page">
				<param name="package" path="${pages.package}" default="pages"/>
				<param name="class" path="@id"/>
				<actions>
				  	<var name="fuppercase" unset="true"/>
				  	<first-uppercase property="fuppercase" input="@{class}"/>
					<copy file="${templates}/Page.as" tofile="${gaia.pages}/${fuppercase}Page.as"
						overwrite="false">
				        <filterchain>
				           <replacetokens>
							    <token key="PACKAGENAME"  value="@{package}"/>
							  	<token key="CLASSNAME"    value="${fuppercase}Page"/>
				           		<token key="width"    value="${width}"/>
				           		<token key="height"    value="${height}"/>
				           		<token key="framerate"    value="${framerate}"/>
				           		<token key="bgcolor"    value="${bgcolor}"/>
				           </replacetokens>
				        </filterchain>		
					</copy>
				</actions>
			</call>
		</xmltask>		
	</target>
	
	<target name="create-static-page">
		<echo message="create-static-page"/>
		<var name="pagesconst" value="//PageConstants"/>
		<get-branch input="site"/>
		<copy file="${templates}/StaticReferencePages.as" tofile="${gaia.pages}/Pages.as"
			overwrite="true">
	        <filterchain>
	           <replacetokens>
				    <token key="PACKAGENAME"  value="${pages.package}"/>
				  	<token key="PAGES"        value="${pagesconst}"/>
	           </replacetokens>
	        </filterchain>		
		</copy>
	</target>
	
	<target name="refresh-site-xml">
		<echo message="refresh-site-xml"/>
	    <update-page-site-xml/>
	</target>
	
	<macrodef name="update-bytes-page">
		<attribute name="input" default="home"/>
		<attribute name="bytes" default="0"/>
		<attribute name="seoBytes" default="0"/>
		<sequential>
			<echo message="@{input}"/>
			<if>
			 	<equals arg1="${seoBytes}" arg2="0" />
				<then>
					<xmltask  source="${bin}/site.xml" dest="${bin}/site3.xml">
						<attr path="//page[@id='@{input}']" attr="bytes" value="@{bytes}"/>						
						<attr path="//page[@id='@{input}']" attr="seoBytes" remove="true"/>
					</xmltask>
				</then>
				<else>
					<xmltask  source="${bin}/site.xml" dest="${bin}/site3.xml">
						<attr path="//page[@id='@{input}']" attr="bytes" value="@{bytes}"/>						
						<attr path="//page[@id='@{input}']" attr="seoBytes" value="@{seoBytes}"/>
					</xmltask>
				</else>
			</if>
			<copy file="${bin}/site3.xml" tofile="${bin}/site.xml"
						overwrite="true"/>
			<delete file="${bin}/site3.xml"/>
		</sequential>
	</macrodef>
	
	<macrodef name="update-page-site-xml">
		<sequential>
			<xmltask source="${bin}/site.xml" dest="${bin}/site2.xml">
				<call path="//page">
					<param name="swffile" path="@src"/>
					<param name="htmlfile" path="@seo" default="false"/>
					<param name="ident" path="@id" default="false"/>
					<actions>
						<var name="branch" value="" unset="true"/>
						<var name="existSwf" value="" unset="true"/>
						<var name="existHtmlSeo" value="" unset="true"/>
						<var name="existHtmlId" value="" unset="true"/>
						<var name="bytes" unset="true"/>
						<var name="seoBytes" value="0" unset="true"/>
						<available file="${bin}\@{swffile}" property="existSwf"/>
						<available file="${bin}\@{htmlfile}.html" property="existHtmlSeo"/>
						<available file="${bin}\@{ident}.html" property="existHtmlId"/>
						<if>
						 	<equals arg1="${existSwf}" arg2="true" />
						 	<then>
						 		<length file="${bin}/@{swffile}" property="bytes" />
								<get-branch-page input="site" page="@{ident}"/>
								<if>
								 	<equals arg1="${existHtmlSeo}" arg2="true" />
								 	<then>
										<length file="${bin}/@{htmlfile}.html" property="seoBytes" />
								 	</then>
								<elseif>
									<equals arg1="${existHtmlId}" arg2="true" />
								  	<then>
										<length file="${bin}/@{ident}.html" property="seoBytes" />
								  	</then>
								</elseif>
								<else>
									<var name="seoBytes" value="0"/>
								</else>
								</if>						 		
						 		<update-bytes-page input="@{ident}" bytes="${bytes}" seoBytes="${seoBytes}"/>
						 	</then>
						</if>
					</actions>
				</call>		
			</xmltask>
			<delete file="${bin}/site2.xml"/>
		</sequential>
	</macrodef>
	
	<macrodef name="get-branch-page">
		<attribute name="input" default=""/>
		<attribute name="parent" default=""/>
		<attribute name="page" default="index"/>
		<sequential>
			<echo message="get-branch-page: @{input}"/>
			<xmltask source="${sitexml}">
				<call path="@{input}/page">
					<param name="class" path="@id"/>
					<param name="seo" path="@seo" default="false"/>
					<actions>
						<var name="uppercase" unset="true"/>
						<var name="lowercase" unset="true"/>
						<var name="ruta" unset="true"/>
						<uppercase property="uppercase" input="@{class}"/>
						<lowercase property="lowercase" input="@{class}"/>
						<drop-first-character property="ruta" input="@{parent}/${lowercase}"/>
						<if>
						 <equals arg1="@{class}" arg2="@{page}" />
						 <then>
						 	<var name="branch" value="${ruta}"/>
						 </then>
						 <else>
						 	<get-branch-page input="@{input}/page" page="@{page}" parent="@{parent}/${lowercase}"/>
						 </else>
						</if>						
					</actions>
				</call>
			</xmltask>
		</sequential>
	</macrodef>
	
	<macrodef name="create-html-page">
		<attribute name="name" default="index"/>
		<attribute name="branch" default="index"/>
		<attribute name="pagetitle" default="index"/>
		<sequential>
			<copy file="${templates}/www/index.html" tofile="${bin}/@{name}.html"
				overwrite="true">
		        <filterchain>
		           <replacetokens>
		           		<token key="title"  value="${appname}"/>
		          	 	<token key="player"  value="${player}"/>
					    <token key="branch"  value="@{branch}"/>
					  	<token key="baseurl" value="${base.url}"/>
		           		<token key="pagetitle" value="@{pagetitle}"/>
		           </replacetokens>
		        </filterchain>
			</copy>				
		</sequential>
	</macrodef>
	
	<macrodef name="add-seo-menu">
		<attribute name="seomenu" default=""/>
		<sequential>
			<copy todir="${bin}" overwrite="true">
				<fileset dir="${bin}/noseo">
				    <include name="*.html"/>
				</fileset>
		        <filterchain>
		           <replacetokens>
					    <token key="seo"  value="@{seomenu}"/>
		           </replacetokens>
		        </filterchain>		
			</copy>	
			<echo message="@{seomenu}"/>
		</sequential>
	</macrodef>		
	
	<target name="seo-html">
		<mkdir dir="${bin}/noseo"/>
		<var name="menu" value="" unset="true"/>
		<var name="branch" value="" unset="true"/>
		
		<create-html-page name="noseo/index" branch="index" pagetitle="${appname}"/>
		
		<var name="menu" value="&lt;li>&lt;a href='${base.url}'>Index&lt;/a>&lt;/li>${line.separator}"/>
		<xmltask source="${sitexml}">
			<call path="//page[@seo]">
				<param name="id" path="@id" default="NO ID"/>
				<param name="seo" path="@seo" default="false"/>
				<param name="title" path="@title" default=""/>
				<actions>
					<if>
					 <equals arg1="@{seo}" arg2="true" />
					 <then>
					   <echo message="@{id}" />
					   <get-branch-page input="site" page="@{id}"/>
					   <echo message="${branch}"/>
					   <create-html-page name="noseo/@{id}" branch="${branch}" pagetitle="${appname} - @{title}"/>
					   <var name="menu" value="${menu}&lt;li>&lt;a href='${base.url}@{id}.html'>@{title}&lt;/a>&lt;/li>${line.separator}"/>
					 </then>
					 <else>
					   <echo message="@{seo}" />
					   <get-branch-page input="site" page="@{id}"/>
					   <echo message="${branch}"/>
					   <create-html-page name="noseo/@{seo}" branch="${branch}" pagetitle="${appname} - @{title}"/>
					   <var name="menu" value="${menu}&lt;li>&lt;a href='${base.url}@{seo}.html'>@{title}&lt;/a>&lt;/li>${line.separator}"/>
					 </else>
					</if>
				</actions>
			</call>
		</xmltask>
		<echo message="${menu}" />
		<add-seo-menu seomenu="${menu}"/>
		<delete dir="${bin}/noseo"/>
	</target>

	<!-- Compile -->
	<target name="compile-pages">
		<echo message="compile-pages"/>
		<xmltask source="${sitexml}">
			<call path="//page">
				<param name="id" path="@id" default="NO ID"/>
				<param name="dest" path="@src" default="NO ID"/>
				<actions>
				  	<var name="fuppercase" unset="true"/>
				  	<first-uppercase property="fuppercase" input="@{id}"/>
					<compile source="${gaia.pages}/${fuppercase}Page.as" 
						target="${bin}/@{dest}"
						debug="false" />
				</actions>
			</call>
		</xmltask>
	</target>
	
	<target name="compile-preloader">
		<echo message="compile-preloader"/>
		<compile source="${gaia.pages}/Preloader.as" 
			target="${bin}/preload.swf"
			debug="false" />
	</target>	

	<target name="compile-main">
		<echo message="compile-main"/>
		<compile source="${src}/Main.as" 
			target="${bin}/main.swf"
			debug="false" />
		<!--
	    <exec executable="${flashplayer}">
	        <arg line="${gaia.bin}/main.swf" />
	    </exec>
	    -->
	</target>
	
    <macrodef name="compile">
    	<attribute name="source" />
    	<attribute name="target" default="bin" />
    	<attribute name="debug" default="false" />
        <sequential>
    	    <mxmlc file="@{source}"
                output="@{target}"
    	    	debug="@{debug}"
    	    	target-player="${player}" 
    	    	optimize="true">
    	    	
    	    	
    	    	<compiler.library-path dir="${lib}">
    	    		<include name="**/*.swc" />
    	    		<include name="${project.lib.linked0}" />
    	    		<include name="${project.lib.linked1}" />
    	    		<include name="${project.lib.linked2}" />
					<exclude name="${project.lib.exclude0}" />
					<exclude name="${project.lib.exclude1}" />
					<exclude name="${project.lib.exclude2}" />
    	    	</compiler.library-path>
				
    	    	
    	    	<!--
    	    	<compiler.external-library-path dir="${lib}">
    	    		<include name="**/*.swc" />
    	    		<include name="${project.lib.linked0}" />
    	    		<include name="${project.lib.linked1}" />
    	    		<include name="${project.lib.linked2}" />
					<exclude name="${project.lib.exclude0}" />
					<exclude name="${project.lib.exclude1}" />
					<exclude name="${project.lib.exclude2}" />
				</compiler.external-library-path>
				-->
				
                <load-config filename="${flex3dir}/frameworks/flex-config.xml"/>
    	    	
                <source-path path-element="${flex3dir}/frameworks"/>
    	    	<source-path path-element="${src}"/>
            </mxmlc>
        </sequential>
    </macrodef>

	<macrodef name="get-branch">
			<attribute name="input" default=""/>
			<attribute name="parent" default=""/>
			<sequential>
				<echo message="get-branch: @{input} | @{parent}"/>
				<xmltask source="${sitexml}">
					<call path="@{input}/page">
						<param name="class" path="@id"/>
						<actions>
							<var name="uppercase" unset="true"/>
							<var name="lowercase" unset="true"/>
							<var name="ruta" unset="true"/>
							<var name="parentid" unset="true"/>
							<uppercase property="uppercase" input="@{class}"/>
							<lowercase property="lowercase" input="@{class}"/>
							<drop-first-character property="ruta" input="@{parent}/${lowercase}"/>
						 	<var name="pagesconst" value="${pagesconst}${line.separator}        public static const ${uppercase}:String = '${ruta}';"/>
						 	<get-branch input="@{input}/page[@id='@{class}']" parent="@{parent}/${lowercase}"/>
						</actions>
					</call>
				</xmltask>
			</sequential>
		</macrodef>	
</project>
